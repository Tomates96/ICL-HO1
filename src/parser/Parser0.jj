options {
	static = false;
}
PARSER_BEGIN(Parser)

package parser;
import environment.*;
import ast.*;
import values.*;
import java.util.*;
/** ID lister. */
public class Parser {

  /** Main entry point. */
  public static void main(String args[]) {
    Parser parser = new Parser(System.in);
    ASTNode exp;
	Environment env = new Environment();
    while (true) {
    try {
    exp = parser.Start();
    System.out.println( exp.eval(env));
    } catch (Exception e) {
      System.out.println ("Syntax Error!");
      parser.ReInit(System.in);
    }
    }
  }

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  < DEF: "def">
  |
  < IN: "in">
  |
  < END: "end">
  | 
  < OR: "||" >
  |
  < TRUE : "true" >
  |   
  < FALSE : "false" >
  |
  < EQUAL:"==" >
  |
  < DIFFERENT:"!=" >
  |
  < NOT:"!" >
  |   
  < GREATER:">" >
  |
  < SMALLER: "< ">
  |
  < GREATER_EQUAL: " >=">
  |
  < SMALLER_EQUAL: "<=">
  |
  < IF : "if">
  | 
  < THEN: "then" >
  |
  < ELSE: "else" >
  |
  < EXIT : "exit">
  | 
  < WHILE:"while" >
  |
  < DO:"do" >
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < EQ : "|">
  |
  < SEMICOL : ";">
  |
  < ASSIGN : ":=">
  |
  < AND: "&&" >
  | 
  < EL: "\n" >
}

ASTNode Start():
{ ASTNode t;}
{
   t = Root() <EL>
   	{ return t; }
   |
    <EXIT> <EL>
        { System.exit(0); }
}

ASTNode Root():
{ASTNode t;}
{
	t = Seq()
	{ return t; }
}

ASTNode Seq():
{ASTNode t1,t2;}
{
	t1 = Assign() [< SEMICOL > t2= Seq() {t1 = new ASTSeq(t1,t2);}]
	{return t1;}
}

ASTNode Assign():
{ASTNode t1,t2;}
{
	t1 = Disj() (LOOKAHEAD(2) < ASSIGN > t2=Disj() {t1=new ASTAssign(t1,t2);})*
	{return t1;}
}

ASTNode Disj():
{ASTNode t1,t2;}
{
	t1=Conj() (LOOKAHEAD(2)(<OR>) t2=Conj() {t1=new ASTDisj(t1,t2);})*
	{return t1;}
}

ASTNode Conj():
{ASTNode t1,t2;}
{
	t1=Bool() (LOOKAHEAD(2)(<AND>) t2=Bool() {t1=new ASTConj(t1,t2);})*
	{return t1;}
}


ASTNode Bool():
{ASTNode t; Token x;}
{
	(x=< TRUE > | x=< FALSE > )
		{return new ASTBool(Boolean.parseBoolean(x.image));}
	|
	< NOT > t = Disj()
		{return new ASTNot(t);}
	|
	t=Cmp()
		{return t;}
}

ASTNode Cmp():
{ASTNode t1,t2;}
{
   t1=cmpNum() (< EQUAL > t2=Bool() {t1=new ASTEqual(t1,t2);}
		|
		<DIFFERENT> t2 = Bool() {t1=new ASTDiff(t1,t2);})?
   {return t1;}
}

ASTNode cmpNum():
{ASTNode t1,t2;}
{
   t1=Exp() (<GREATER> t2=Exp() {t1=new ASTBigger(t1,t2);}
	     |
	     <SMALLER> t2=Exp() {t1=new ASTSmaller(t1,t2);}
	     |
	     <GREATER_EQUAL> t2=Exp() {t1=new ASTBiggerEQ(t1,t2);}
	     |
	     <SMALLER_EQUAL> t2=Exp() {t1=new ASTSmallerEQ(t1,t2);})?
   {return t1;}
}


ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term() 
                 { if (op.kind == PLUS) 
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
                 } 
               ) *
     { return t1; } 
}



ASTNode Term() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = Fact() (LOOKAHEAD(2) ( op=<TIMES> | op=<DIV> ) t2 = Term() 
 		 {	if (op.kind == TIMES) 
                         t1 = new ASTTimes(t1,t2);
                   else  t1 = new ASTDiv(t1,t2);
                 } 
		)*
     { return t1; } 
}


ASTNode Fact() :
{ Token n; 
  ASTNode t,t1,t2, body;
  List<Binder> bindings = new LinkedList<Binder>();}
{
    n = <Num>
   { return new ASTNum(Integer.parseInt(n.image)); }
   |
   < LPAR > t=Disj() < RPAR > 
		{return t;}
   |
   < DEF > bindings = Bindings() <IN>  body = Root() <END>
   {return new ASTDef(bindings,body);}
   |
	< WHILE > t1=Root() < DO > t2=Root() < END > 
		{return new ASTWhile(t1,t2);}
	|
	< IF > t=Root() < THEN > t1=Root() < ELSE > t2=Root() < END >
		{return new ASTIf(t,t1,t2);} 
}

List<Binder> Bindings():
{ Token x;
  ASTNode t1;
  List<Binder> bindings = new LinkedList <Binder>(); }
{
  (( x = <Id> <EQ> t1 = Root() )
   {bindings.add(new Binder(x.image,t1));}) + {return bindings;}
}





















