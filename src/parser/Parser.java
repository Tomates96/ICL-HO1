/* Generated By:JavaCC: Do not edit this line. Parser.java */
package parser;
import environment.*;
import ast.*;
import values.*;
import java.util.*;
/** ID lister. */
public class Parser implements ParserConstants {

  /** Main entry point. */
  public static void main(String args[]) {
    Parser parser = new Parser(System.in);
    ASTNode exp;
        Environment env = new Environment();
    while (true) {
    try {
    exp = parser.Start();
    System.out.println( exp.eval(env));
    } catch (Exception e) {
      System.out.println ("Syntax Error!");
      parser.ReInit(System.in);
    }
    }
  }

  final public ASTNode Start() throws ParseException {
  ASTNode t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
    case TRUE:
    case FALSE:
    case NOT:
    case IF:
    case WHILE:
    case Num:
    case LPAR:
      t = Root();
      jj_consume_token(EL);
          {if (true) return t;}
      break;
    case EXIT:
      jj_consume_token(EXIT);
      jj_consume_token(EL);
          System.exit(0);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Root() throws ParseException {
 ASTNode t;
    t = Seq();
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Seq() throws ParseException {
 ASTNode t1,t2;
    t1 = Assign();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOL:
      jj_consume_token(SEMICOL);
      t2 = Seq();
                                              t1 = new ASTSeq(t1,t2);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
         {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Assign() throws ParseException {
 ASTNode t1,t2;
    t1 = Disj();
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(ASSIGN);
      t2 = Disj();
                                                        t1=new ASTAssign(t1,t2);
    }
         {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Disj() throws ParseException {
 ASTNode t1,t2;
    t1 = Conj();
    label_2:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(OR);
      t2 = Conj();
                                                 t1=new ASTDisj(t1,t2);
    }
         {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Conj() throws ParseException {
 ASTNode t1,t2;
    t1 = Bool();
    label_3:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(AND);
      t2 = Bool();
                                                  t1=new ASTConj(t1,t2);
    }
         {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Bool() throws ParseException {
 ASTNode t; Token x;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        x = jj_consume_token(TRUE);
        break;
      case FALSE:
        x = jj_consume_token(FALSE);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 {if (true) return new ASTBool(Boolean.parseBoolean(x.image));}
      break;
    case NOT:
      jj_consume_token(NOT);
      t = Disj();
                 {if (true) return new ASTNot(t);}
      break;
    case DEF:
    case IF:
    case WHILE:
    case Num:
    case LPAR:
      t = Cmp();
                 {if (true) return t;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Cmp() throws ParseException {
 ASTNode t1,t2;
    t1 = cmpNum();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
    case DIFFERENT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
        t2 = Bool();
                                     t1=new ASTEqual(t1,t2);
        break;
      case DIFFERENT:
        jj_consume_token(DIFFERENT);
        t2 = Bool();
                                         t1=new ASTDiff(t1,t2);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode cmpNum() throws ParseException {
 ASTNode t1,t2;
    t1 = Exp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GREATER:
    case SMALLER:
    case GREATER_EQUAL:
    case SMALLER_EQUAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GREATER:
        jj_consume_token(GREATER);
        t2 = Exp();
                                 t1=new ASTBigger(t1,t2);
        break;
      case SMALLER:
        jj_consume_token(SMALLER);
        t2 = Exp();
                                 t1=new ASTSmaller(t1,t2);
        break;
      case GREATER_EQUAL:
        jj_consume_token(GREATER_EQUAL);
        t2 = Exp();
                                       t1=new ASTBiggerEQ(t1,t2);
        break;
      case SMALLER_EQUAL:
        jj_consume_token(SMALLER_EQUAL);
        t2 = Exp();
                                       t1=new ASTSmallerEQ(t1,t2);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Exp() throws ParseException {
  Token op;
  ASTNode t1, t2;
    t1 = Term();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        op = jj_consume_token(PLUS);
        break;
      case MINUS:
        op = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Term();
                   if (op.kind == PLUS)
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
    }
       {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Term() throws ParseException {
 Token op;
  ASTNode t1, t2;
    t1 = Fact();
    label_5:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        op = jj_consume_token(TIMES);
        break;
      case DIV:
        op = jj_consume_token(DIV);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Term();
                        if (op.kind == TIMES)
                         t1 = new ASTTimes(t1,t2);
                   else  t1 = new ASTDiv(t1,t2);
    }
       {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Fact() throws ParseException {
  Token n;
  ASTNode t,t1,t2, body;
  List<Binder> bindings = new LinkedList<Binder>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Num:
      n = jj_consume_token(Num);
     {if (true) return new ASTNum(Integer.parseInt(n.image));}
      break;
    case LPAR:
      jj_consume_token(LPAR);
      t = Disj();
      jj_consume_token(RPAR);
                 {if (true) return t;}
      break;
    case DEF:
      jj_consume_token(DEF);
      bindings = Bindings();
      jj_consume_token(IN);
      body = Root();
      jj_consume_token(END);
    {if (true) return new ASTDef(bindings,body);}
      break;
    case WHILE:
      jj_consume_token(WHILE);
      t1 = Root();
      jj_consume_token(DO);
      t2 = Root();
      jj_consume_token(END);
                 {if (true) return new ASTWhile(t1,t2);}
      break;
    case IF:
      jj_consume_token(IF);
      t = Root();
      jj_consume_token(THEN);
      t1 = Root();
      jj_consume_token(ELSE);
      t2 = Root();
      jj_consume_token(END);
                 {if (true) return new ASTIf(t,t1,t2);}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<Binder> Bindings() throws ParseException {
  Token x;
  ASTNode t1;
  List<Binder> bindings = new LinkedList <Binder>();
    label_6:
    while (true) {
      x = jj_consume_token(Id);
      jj_consume_token(EQ);
      t1 = Root();
    bindings.add(new Binder(x.image,t1));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Id:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
    }
                                               {if (true) return bindings;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(DEF)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(Num)) return true;
    return false;
  }

  private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) return true;
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x21321310,0x0,0x300,0x21221310,0xc00,0xc00,0x1e000,0x1e000,0x6000000,0x6000000,0x18000000,0x21220010,0x800000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[36];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 36; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
