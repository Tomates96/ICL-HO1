options {
	static = false;
}
PARSER_BEGIN(Parser)


import ast.*;
import environment.*;
import java.util.*;
/** ID lister. */
public class Parser {

  /** Main entry point. */
  public static void main(String args[]) {
    Parser parser = new Parser(System.in);
    ASTNode exp;
	Environment env = new Environment();
    while (true) {
    try {
    exp = parser.Start();
    System.out.println( exp.eval(env));
    } catch (Exception e) {
      System.out.println ("Syntax Error!");
      parser.ReInit(System.in);
    }
    }
  }

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  < DEF: "def">
  |
  < IN: "in">
  |
  < END: "end">
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < EQ : "|">
  |
  < EL: "\n" >
}

ASTNode Start():
{ ASTNode t; }
{
   t = Exp() <EL>
   { return t; }
}

ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term() 
                 { if (op.kind == PLUS) 
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
                 } 
               ) *
     { return t1; } 
}

ASTNode Term() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = Fact() ( ( op=<TIMES> | op=<DIV> ) t2 = Term() 
 		 {	if (op.kind == TIMES) 
                         t1 = new ASTTimes(t1,t2);
                   else  t1 = new ASTDiv(t1,t2);
                 } 
		)?
     { return t1; } 
}


ASTNode Fact() :
{ Token n; 
  ASTNode t, body;
  List<Binder> bindings = new LinkedList<Binder>();}
{
    n = <Num>
   { return new ASTNum(Integer.parseInt(n.image)); }
   |
   <LPAR> t=Exp() <RPAR>
	{ return t; }
   |
   < DEF > bindings = Bindings() <IN>  body = Exp() <END>
   {return new ASTDef(bindings,body);}
}

List<Binder> Bindings():
{ Token x;
  ASTNode t1;
  List<Binder> bindings = new LinkedList <Binder>(); }
{
  (( x = <Id> <EQ> t1 = Exp() )
   {bindings.add(new Binder(x.image,t1));}) + {return bindings;}
}





















